#include <stdio.h>
#include <stdlib.h>
struct Node {
int value;
struct Node* left;
struct Node* right;
};


struct Node* createNode(int key) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->value = key;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
struct Node* insert(struct Node* root, int key) {
if (root == NULL) {
return createNode(key);
}
if (key < root->value) {
root->left = insert(root->left, key);
} else if (key > root->value) {
root->right = insert(root->right, key);
}
return root;
}

struct Node* search(struct Node* root, int key) {

if (root == NULL || root->value == key) {
return root;
}
if (key > root->value) {
return search(root->right, key);
}
return search(root->left, key);

}
void inorderTraversal(struct Node* root) {
if (root != NULL) {
inorderTraversal(root->left);
printf("%d ", root->value);
inorderTraversal(root->right);
}
}
void preorderTraversal(struct Node* root) {
if (root != NULL) {
printf("%d ", root->value);
preorderTraversal(root->left);
preorderTraversal(root->right);
}
}
void postorderTraversal(struct Node* root) {
if (root != NULL) {
postorderTraversal(root->left);
postorderTraversal(root->right);
printf("%d ", root->value);

}
}


struct Node* deleteNode(struct Node* root, int key) {
if (root == NULL) {
return root;
}


if (key < root->value) {

root->left = deleteNode(root->left, key);

} else if (key > root->value) {

root->right = deleteNode(root->right, key);
} else {


// Node with only one child or no child
if (root->left == NULL) {
struct Node* temp = root->right;
free(root);
return temp;
} else if (root->right == NULL) {
struct Node* temp = root->left;
free(root);
return temp;
}

}
}
struct Node* minValueNode(struct Node* node) {
struct Node* current = node;

// Loop down to find the leftmost leaf
while (current && current->left != NULL) {
current = current->left;
}
return current;
}
int main() {
struct Node* root = NULL;
int choice, key;

do {
printf("1. Insert\n");
printf("2. Search\n");
printf("3. In-order Traversal\n");
printf("4. Pre-order Traversal\n");
printf("5. Post-order Traversal\n");
printf("6. Delete\n");
printf("7. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);

switch (choice) {
case 1:
{
printf("Enter value to insert: ");
scanf("%d", &key);
root = insert(root, key);
printf("Inserted %d\n", key);

break;
}

case 2:
{
printf("Enter value to search: ");
scanf("%d", &key);
if (search(root, key)) {
printf("Found %d\n", key);
} else {
printf("Not found\n");
}
break;
}
case 3:

{printf("In-order Traversal: ");
inorderTraversal(root);
printf("\n");
break;
}
case 4:
{
printf("Pre-order Traversal: ");
preorderTraversal(root);
printf("\n");
break;
}
case 5:
{
printf("Post-order Traversal: ");

postorderTraversal(root);
printf("\n");
break;
}
case 6:
{printf("Enter value to delete: ");
scanf("%d", &key);
root = deleteNode(root, key);
printf("Deleted %d\n", key);
break;
}
case 7:
{
exit(0);
break;
}
default:
{
printf("Invalid choice\n");
}

}

}
while(choice>=1);
return 0;
}
