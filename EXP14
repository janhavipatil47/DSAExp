#include <stdio.h>
// Function declarations
void mergeSort(int arr[], int l, int r);
void merge(int arr[], int l, int m, int r);
void quickSort(int arr[], int low, int high);
int partition(int arr[], int low, int high);
void swap(int* a, int* b);
void printArray(int arr[], int size);
void inputArray(int arr[], int size);
int main() {
int choice, n;
printf("Enter the number of elements in the array: ");
scanf("%d", &n);
int arr[n];
inputArray(arr, n);
do {
printf("\nMenu: \n");
printf("1. Merge Sort\n");
printf("2. Quick Sort\n");
printf("3. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Performing Merge Sort...\n");
mergeSort(arr, 0, n – 1);
printf("Sorted Array: ");
printArray(arr, n);
break;
case 2:
printf("\nPerforming Quick Sort...\n");
quickSort(arr, 0, n – 1);
printf("Sorted Array: ");
printArray(arr, n);
break;
case 3:
printf("Exiting...\n");
break;
default:
printf("Invalid choice! Please select again.\n");
}
// Re-input array after sorting to maintain original input for both sorting methods

if (choice == 1 || choice == 2) {
inputArray(arr, n);
}
} while (choice != 3);
return 0;
}
// Function to input elements of the array
void inputArray(int arr[], int size) {
printf("Enter the elements of the array: \n");
for (int i = 0; i < size; i++) {
scanf("%d", &arr[i]);
}
}
// Function to print the array
void printArray(int arr[], int size) {
for (int i = 0; i < size; i++) {
printf("%d ", arr[i]);
}
printf("\n");
}
// Merge Sort function
void mergeSort(int arr[], int l, int r) {
if (l < r) {
int m = l + (r – l) / 2;
mergeSort(arr, l, m);
mergeSort(arr, m + 1, r);
merge(arr, l, m, r);
}
}
// Function to merge two halves
void merge(int arr[], int l, int m, int r) {
int n1 = m – l + 1;
int n2 = r – m;
int L[n1], R[n2];
// Copy data to temp arrays L[] and R[]
for (int i = 0; i < n1; i++)
L[i] = arr[l + i];
for (int j = 0; j < n2; j++)
R[j] = arr[m + 1 + j];
// Merge the temp arrays back into arr[l..r]
int i = 0, j = 0, k = l;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {

arr[k] = L[i];
i++;
} else {
arr[k] = R[j];
j++;
}
k++;
}
// Copy the remaining elements of L[], if any
while (i < n1) {
arr[k] = L[i];
i++;
k++;
}
// Copy the remaining elements of R[], if any
while (j < n2) {
arr[k] = R[j];
j++;
k++;
}
}
// Quick Sort function
void quickSort(int arr[], int low, int high) {
if (low < high) {
int pi = partition(arr, low, high);
quickSort(arr, low, pi – 1);
quickSort(arr, pi + 1, high);
}
}
// Partition function for Quick Sort
int partition(int arr[], int low, int high) {
int pivot = arr[high]; // pivot
int i = (low – 1); // Index of smaller element
for (int j = low; j <= high – 1; j++) {
// If current element is smaller than or equal to pivot
if (arr[j] <= pivot) {
i++; // increment index of smaller element
swap(&arr[i], &arr[j]);
}
}
swap(&arr[i + 1], &arr[high]);
return (i + 1);
}

// Function to swap two elements
void swap(int* a, int* b) {
int t = *a;
*a = *b;
*b = t;
}
