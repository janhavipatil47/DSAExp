#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
void main()
{
struct node *temp,*head=NULL,*newnode;
int select=1;
do
{
printf("Do you want to enter a newnode? Enter 1 \n");
printf("Enter 2 to view the linked list \n");
printf("Enter 3 to insert a node at the beginning \n");
printf("Enter 4 to insert a node at the end \n");
printf("Enter 5 to insert a node at the middle \n");
printf("Enter 6 to delete the node from the beginning \n");
printf("Enter 7 to delete the node from the end \n");
printf("Enter 8 to delete the node from the middle \n");
scanf("%d",&select);
switch(select)
{
 case 1:{
int x;
printf("Enter the data to be inserted \n");
scanf("%d",&x);
newnode=(struct node *)malloc(sizeof(struct node *));
newnode->data=x;
newnode->next=NULL;
if(head==NULL)
{
temp=head=newnode;
}
else
{
temp->next=newnode;
temp=temp->next;
}
}
break;

case 2:
{
    temp=head;
    while(temp!=NULL)
    {
        printf("%d \t",temp->data);
        temp=temp->next;
    }
    printf("\n");

break;
}
case 3:
{
    int x;
    printf("Enter the data to be inserted \n");
scanf("%d",&x);
newnode=(struct node *)malloc(sizeof(struct node *));
newnode->data=x;
newnode->next=head;
head=newnode;
break;
}
case 4:
{
    int x;
    printf("Enter the data to be inserted \n");
scanf("%d",&x);
newnode=(struct node *)malloc(sizeof(struct node *));
newnode->data=x;
newnode->next=NULL;
temp=head;
while(temp->next!=NULL)
{
    temp=temp->next;
}
temp->next=newnode;
break;
}
case 5:
{
    
int x,loc,i=1;
printf("Enter the data to be inserted \n");
scanf("%d",&x);
newnode=(struct node *)malloc(sizeof(struct node *));
newnode->data=x;
temp=head;
printf("Enter the location at which the node is to be inserted \n");
scanf("%d",&loc);
while(i<loc-1)
{
    temp=temp->next;
    i++;
}
newnode->next=temp->next;
temp->next=newnode;
break;
}
case 6:
{
    if(head==NULL)
    {
        printf("The list is empty \n");
    }
    else
    {
        temp=head;
        head=temp->next;
        free(temp);
    }
    break;
}
case 7:
{
    if(head==NULL)
    {
        printf("The list is empty \n");
    }
    else
    {
        temp=head;
        struct node *dnode=temp;
        while(temp->next!=NULL)
        {
             dnode=temp;
            temp=temp->next;
        }
        dnode->next=NULL;
        free(temp);
    }
    break;
}
case 8:
{
    int i=1;
    int loc;
    temp=head;
    struct node *dnode;
    printf("Enter the node location which is to be deleted \n");
    scanf("%d",&loc);
    while(i<loc-1)
    {
    
        temp=temp->next;
        i++;
    }
    dnode=temp->next;
    temp->next=dnode->next;
    free(dnode);
    break;
}
default:printf("Invalid \n");
}
}
while(select>=1);
}
